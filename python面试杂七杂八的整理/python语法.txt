深拷贝浅拷贝
对，不过针对赋值，有深拷贝和浅拷贝两种意义截然不同的方式。
下面这种赋值方法实际上是对象的深拷贝，即赋值左右的两个对象具有相同值，但是是位于不同内存片区的对象
s = ['abcdefg']
a = s[:]
print(a)
print(s is a)
['abcdefg']
False
而如果是像下面这样直接赋值，则左右两个对象实际上被分配的是同一个内存空间，即所谓的浅拷贝
s1 = 'abcdefg'
s2 = s1
print(s1 == s2)
True

什么是闭包？
理论：
闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它提高了代码的可重复使用性。
不同的语言实现闭包的方式不同。Python以函数对象为基础，为闭包这一语法结构提供支持的 。Python一切皆对象，函数这一语法结构也是一个对象。在函数对象中，我们像使用一个普通对象一样使用函数对象，比如更改函数对象的名字，或者将函数对象作为参数进行传递。（是高阶函数，用在函数式编程）（理解了闭包才能更好的理解装饰器，装饰器其实就是一个闭包函数？？）（函数做为一等公民的语言都存在闭包）
理解：
python有一个很有意思的地方，就是def函数可以嵌套在另一个def函数之中。调用外层函数时，运行到的内层def语句仅仅是完成对内层函数的定义，而不会去调用内层函数，除非在嵌套函数之后又显式的对其进行调用。
闭包的特点：
1. 必须有一个内嵌函数
2. 内嵌函数必须引用外部函数中的变量
3. 外部函数的返回值必须是内嵌函数

简单闭包函数：
def func(a,b): #外部函数
    def n_func(x): #内嵌函数
        return a*x+b
    return n_func

c = func(1,2)#一个函数结束的时候，会把自己的临时变量都释放还给内存，但是闭包并不会，他会保存变量的值
print(c(2))
