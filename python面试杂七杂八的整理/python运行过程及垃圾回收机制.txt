Python视角运行过程：
一：字节码编译
1.程序执行时，Python内部会先将源代码编译成字节码的形式。
2.如果Python进程（python进程！！！）在机器上拥有写入权限，那么它将程序的字节码保存为一个以.pyc为扩展名的文件。
为什么这样做（Python这样保存字节码是作为一种启动速度的优化。下一次运行时，如果在上次保存字节码后没有修改过源代码，Python会加载.pyc文件跳过编译这一步。当Python必须重新编译时，它会自动检查源文件和字节码文件的时间戳。）
二python虚拟机（PVM）
一旦程序编译成字节码(或字节码从已经存在的.pyc文件中载入)，之后的字节码发送到PVM上执行。代码被自动编译，解释。
关于python性能的解释：
代码在写好后立即运行。另一个就是Python字节码不是机器的二进制代码，只是特定于Python的一种表现形式。这就是Python代码无法运行的像C或C++代码一样快的原因，和其他经典的解释器不同，这里仍有内部的编译步骤，Python并不需要反复的重分析和重分解每一行语句。（实际的效果就是纯Python代码的运行速度介于传统的编译语言和传统的解释语言之间）。



Python垃圾回收机制  Garbage collection(GC)
学习链接：https://www.cnblogs.com/pinganzi/p/6646742.html
一句话概括：python采用的是 引用计数机制 为主，标记-清除和分代收集两种机制 为辅的策略（辅助策略是用来检测循环引用的）。
一、引用计数机制
机制原理：
python里每一个东西都是对象，它们的核心就是一个结构体：PyObject。
PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少
当引用计数（ob_refcnt）为0,该对象的生命就结束了。
优点：
1.简单
2.实时性（一旦没有引用，内存就直接释放，处理回收内存的时间分摊到了平时）
缺点：
1.维护引用计数消耗资源
2.循环引用（用标记清除和分代收集解决）

详细分析：
导致引用计数+1的情况
1.对象被创建，例如a=23
2.对象被引用，例如b=a
3.对象被作为参数，传入到一个函数中，例如func(a)
4.对象作为一个元素，存储在容器中，例如list1=[a,a]
导致引用计数-1的情况
1.对象的别名被显式销毁，例如del a
2.对象的别名被赋予新的对象，例如a=24
3.一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）
4.对象所在的容器被销毁，或从容器中删除对象



